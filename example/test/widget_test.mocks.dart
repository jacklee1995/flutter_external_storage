// Mocks generated by Mockito 5.4.4 from annotations
// in external_storage_example/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i7;

import 'package:external_storage/src/enums/watch_event_type.dart' as _i9;
import 'package:external_storage/src/external_storage_impl.dart' as _i4;
import 'package:external_storage/src/models/directory_info.dart' as _i3;
import 'package:external_storage/src/models/file_info.dart' as _i2;
import 'package:external_storage/src/models/storage_device.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileInfo_0 extends _i1.SmartFake implements _i2.FileInfo {
  _FakeFileInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectoryInfo_1 extends _i1.SmartFake implements _i3.DirectoryInfo {
  _FakeDirectoryInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExternalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockExternalStorage extends _i1.Mock implements _i4.ExternalStorage {
  MockExternalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.StorageDevice>> getAllStorageDevices() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllStorageDevices,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.StorageDevice>>.value(<_i6.StorageDevice>[]),
      ) as _i5.Future<List<_i6.StorageDevice>>);

  @override
  _i5.Future<_i7.Uint8List> readFile(
    String? path, {
    int? offset = 0,
    int? length = -1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [path],
          {
            #offset: offset,
            #length: length,
          },
        ),
        returnValue: _i5.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i5.Future<_i7.Uint8List>);

  @override
  _i5.Future<int> writeFile(
    String? path,
    _i7.Uint8List? data, {
    bool? append = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            path,
            data,
          ],
          {#append: append},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> copyFile(
    String? sourcePath,
    String? targetPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyFile,
          [
            sourcePath,
            targetPath,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> moveFile(
    String? sourcePath,
    String? targetPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveFile,
          [
            sourcePath,
            targetPath,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.FileInfo> getFileInfo(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getFileInfo,
          [path],
        ),
        returnValue: _i5.Future<_i2.FileInfo>.value(_FakeFileInfo_0(
          this,
          Invocation.method(
            #getFileInfo,
            [path],
          ),
        )),
      ) as _i5.Future<_i2.FileInfo>);

  @override
  _i5.Future<String> calculateMD5(String? path) => (super.noSuchMethod(
        Invocation.method(
          #calculateMD5,
          [path],
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #calculateMD5,
            [path],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> createFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #createFile,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> fileExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String?> getMimeType(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getMimeType,
          [path],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<bool> truncateFile(
    String? path,
    int? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #truncateFile,
          [
            path,
            size,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.FileInfo>> listDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i5.Future<List<_i2.FileInfo>>.value(<_i2.FileInfo>[]),
      ) as _i5.Future<List<_i2.FileInfo>>);

  @override
  _i5.Future<bool> createDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> moveDirectory(
    String? sourcePath,
    String? targetPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveDirectory,
          [
            sourcePath,
            targetPath,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> copyDirectory(
    String? sourcePath,
    String? targetPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyDirectory,
          [
            sourcePath,
            targetPath,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.DirectoryInfo> getDirectoryInfo(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectoryInfo,
          [path],
        ),
        returnValue: _i5.Future<_i3.DirectoryInfo>.value(_FakeDirectoryInfo_1(
          this,
          Invocation.method(
            #getDirectoryInfo,
            [path],
          ),
        )),
      ) as _i5.Future<_i3.DirectoryInfo>);

  @override
  _i5.Future<bool> isDirectoryEmpty(String? path) => (super.noSuchMethod(
        Invocation.method(
          #isDirectoryEmpty,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<int> getDirectorySize(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getDirectorySize,
          [path],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> directoryExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #directoryExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> startWatching(
    String? path, {
    bool? recursive = false,
    List<_i9.WatchEventType>? events = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startWatching,
          [path],
          {
            #recursive: recursive,
            #events: events,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> stopWatching(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stopWatching,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> stopAllWatching() => (super.noSuchMethod(
        Invocation.method(
          #stopAllWatching,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<String>> getWatchedPaths() => (super.noSuchMethod(
        Invocation.method(
          #getWatchedPaths,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> isWatching(String? path) => (super.noSuchMethod(
        Invocation.method(
          #isWatching,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> checkStoragePermissions() => (super.noSuchMethod(
        Invocation.method(
          #checkStoragePermissions,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> requestStoragePermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestStoragePermissions,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> shouldShowRequestPermissionRationale() =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldShowRequestPermissionRationale,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> checkPermission(String? permission) => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [permission],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<String>> getGrantedPermissions() => (super.noSuchMethod(
        Invocation.method(
          #getGrantedPermissions,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  void registerWatchEventCallback(
          void Function(
            String,
            _i9.WatchEventType,
          )? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #registerWatchEventCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterWatchEventCallback() => super.noSuchMethod(
        Invocation.method(
          #unregisterWatchEventCallback,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerPermissionResultCallback(void Function(bool)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #registerPermissionResultCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterPermissionResultCallback() => super.noSuchMethod(
        Invocation.method(
          #unregisterPermissionResultCallback,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
